// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql" // PostgreSQL is the recommended relational database
  url      = env("DATABASE_URL")
}

// Enum for Role-Based Access Control
enum Role {
  ADMIN
  LAB_ASSISTANT
}

// User model for authentication and roles
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String // Hashed password
  role      Role     @default(LAB_ASSISTANT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A User can be a LabAssistant
  labAssistant LabAssistant?
}

// Department model for organizing courses and assistants
model Department {
  id   String @id @default(cuid())
  name String @unique

  // A Department has many LabAssistants and many Courses
  courses       Course[]
  labAssistants LabAssistant[]
}

// Lab Assistant model, linked to a User
model LabAssistant {
  id           String @id @default(cuid())
  userId       String @unique // Foreign key to User
  firstName    String
  lastName     String
  departmentId String

  // A LabAssistant belongs to one User and one Department
  user       User       @relation(fields: [userId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  // A LabAssistant can have many assignments
  assignments ScheduleAssignment[]
}

// Lab Room model for physical spaces
model LabRoom {
  id       String @id @default(cuid())
  name     String @unique
  capacity Int // e.g., max number of students
  status   String @default("available")

  // A LabRoom can have many assignments
  assignments ScheduleAssignment[]
}

// Standardized time slots
model TimeSlot {
  id        String @id @default(cuid())
  dayOfWeek String
  startTime String
  endTime   String

  // A TimeSlot can have many assignments
  assignments ScheduleAssignment[]
}

// Course model with department association
model Course {
  id           String @id @default(cuid())
  name         String
  courseCode   String @unique
  departmentId String

  // A Course belongs to one Department and can have many CourseOfferings
  department      Department       @relation(fields: [departmentId], references: [id])
  courseOfferings CourseOffering[]
}

// Course offering for a specific semester/year
model CourseOffering {
  id       String @id @default(cuid())
  courseId String
  semester String
  year     Int

  // A CourseOffering belongs to one Course and has many Sections
  course   Course    @relation(fields: [courseId], references: [id])
  sections Section[]
}

// Section model, a specific instance of a course offering
model Section {
  id               String @id @default(cuid())
  sectionNumber    String
  requiredLabSize  Int
  courseOfferingId String

  // A Section belongs to one CourseOffering
  courseOffering CourseOffering @relation(fields: [courseOfferingId], references: [id])

  // A Section has one, and only one, ScheduleAssignment
  assignment ScheduleAssignment?
}

// The central scheduling assignment model
model ScheduleAssignment {
  id        String   @id @default(cuid())
  status    String   @default("active") // active, inactive, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A ScheduleAssignment links a Section, a LabRoom, a LabAssistant, and a TimeSlot
  sectionId      String @unique // Ensures a section can only be assigned once
  labRoomId      String
  labAssistantId String
  timeSlotId     String

  // Relationships
  section      Section      @relation(fields: [sectionId], references: [id])
  labRoom      LabRoom      @relation(fields: [labRoomId], references: [id])
  labAssistant LabAssistant @relation(fields: [labAssistantId], references: [id])
  timeSlot     TimeSlot     @relation(fields: [timeSlotId], references: [id])
}
